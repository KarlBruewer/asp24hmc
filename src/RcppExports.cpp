// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// leapfrog_cpp
Rcpp::List leapfrog_cpp(const Rcpp::List& m, int i, int trajectory_length, double stepsize, Eigen::VectorXd v_loc_old, Eigen::VectorXd v_scale_old);
RcppExport SEXP _asp24hmc_leapfrog_cpp(SEXP mSEXP, SEXP iSEXP, SEXP trajectory_lengthSEXP, SEXP stepsizeSEXP, SEXP v_loc_oldSEXP, SEXP v_scale_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type trajectory_length(trajectory_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type v_loc_old(v_loc_oldSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type v_scale_old(v_scale_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(leapfrog_cpp(m, i, trajectory_length, stepsize, v_loc_old, v_scale_old));
    return rcpp_result_gen;
END_RCPP
}
// log_acceptance_criterion
double log_acceptance_criterion(Eigen::VectorXd prev_x, Eigen::VectorXd Impulse_old, Eigen::VectorXd x, Eigen::VectorXd v, Rcpp::List m);
RcppExport SEXP _asp24hmc_log_acceptance_criterion(SEXP prev_xSEXP, SEXP Impulse_oldSEXP, SEXP xSEXP, SEXP vSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type prev_x(prev_xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Impulse_old(Impulse_oldSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(log_acceptance_criterion(prev_x, Impulse_old, x, v, m));
    return rcpp_result_gen;
END_RCPP
}
// hmc_sampler
Rcpp::List hmc_sampler(const Rcpp::List& m, int i, int trajectory_length, double stepsize);
RcppExport SEXP _asp24hmc_hmc_sampler(SEXP mSEXP, SEXP iSEXP, SEXP trajectory_lengthSEXP, SEXP stepsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type trajectory_length(trajectory_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(hmc_sampler(m, i, trajectory_length, stepsize));
    return rcpp_result_gen;
END_RCPP
}
// build_chain_cpp
Rcpp::List build_chain_cpp(Rcpp::List m, double stepsize, int trajectory_length, int chain_length, int burn_in, int thin);
RcppExport SEXP _asp24hmc_build_chain_cpp(SEXP mSEXP, SEXP stepsizeSEXP, SEXP trajectory_lengthSEXP, SEXP chain_lengthSEXP, SEXP burn_inSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< int >::type trajectory_length(trajectory_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(build_chain_cpp(m, stepsize, trajectory_length, chain_length, burn_in, thin));
    return rcpp_result_gen;
END_RCPP
}
// grad_ll_cpp
Eigen::VectorXd grad_ll_cpp(const Eigen::VectorXd& beta, const Eigen::VectorXd& gamma, const Rcpp::List& m, const std::string& type);
RcppExport SEXP _asp24hmc_grad_ll_cpp(SEXP betaSEXP, SEXP gammaSEXP, SEXP mSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_ll_cpp(beta, gamma, m, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_asp24hmc_leapfrog_cpp", (DL_FUNC) &_asp24hmc_leapfrog_cpp, 6},
    {"_asp24hmc_log_acceptance_criterion", (DL_FUNC) &_asp24hmc_log_acceptance_criterion, 5},
    {"_asp24hmc_hmc_sampler", (DL_FUNC) &_asp24hmc_hmc_sampler, 4},
    {"_asp24hmc_build_chain_cpp", (DL_FUNC) &_asp24hmc_build_chain_cpp, 6},
    {"_asp24hmc_grad_ll_cpp", (DL_FUNC) &_asp24hmc_grad_ll_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_asp24hmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
